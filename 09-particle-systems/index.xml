




  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Particle Systems :: K-State CIS 580 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/</link>
    <description>One, Two, three, … BOOM!</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Aug 2023 11:18:05 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cis580/09-particle-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/01-introduction/</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/01-introduction/</guid>
      <description>Continuing our exploration of the SpriteBatch and Sprites, let’s turn our attention to particle systems. Particle systems leverage thousands of very small sprites to create the illusion of fire, smoke, explosions, precipitation, waterfalls, and many other interesting effects. They are a staple in modern game engines both to create ambience (i.e. fires and smoke) and to enhance gameplay (glowing sparkles around objects that can be interacted with). In this section, we’ll discuss the basics of how particle systems work, and iteratively build a particle system in MonoGame that can be used in your own games.</description>
    </item>
    <item>
      <title>The Particle</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/02-particle-class/</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/02-particle-class/</guid>
      <description>At the heart of a particle system is a collection of particles - tiny sprites that move independently of one another, but when rendered together, create the interesting effects we are after. To draw each individual particle, we need to know where on the screen it should appear, as well as the texture we should be rendering, and any color effects we might want to apply. Moreover, each frame our particles will be moving, so we’ll also want to be able to track information to make that process easier, like velocity, acceleration, and how long a particle has been “alive”.</description>
    </item>
    <item>
      <title>The Particle System Class</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/03-particle-system-class/</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/03-particle-system-class/</guid>
      <description>The next part of the particle system is the class representing the particle system itself. Like any other sprite-based strategy, this will involve both an Update() and Draw() method that must be invoked every time through the game loop. But ideally we’d like our particle systems to be an almost hands-off system - once it’s created, we can just let it do its thing without intervention. This is where the idea of game components from our architecture discussion can come into play - our particle system can inherit from the DrawableGameComponent class, which means it can be added to to our Game.</description>
    </item>
    <item>
      <title>Example Particle Systems</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/04-example-particle-systems/</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/04-example-particle-systems/</guid>
      <description>To create a particle system, we’ll derive a class from the ParticleSystem class and override its InitializeConstants(), and possibly its InitializeParticle() and UpdateParticle() methods. Let’s look at some examples:&#xA;Rain Particle System This is a simplistic implementation of rain that is spawned in a predefined rectangle and falls to the bottom of the screen. The texture we’ll use is this drop&#xA;We start by defining a class extending the ParticleSystem:</description>
    </item>
    <item>
      <title>Using Particle Systems</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/05-using-particle-systems/</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/05-using-particle-systems/</guid>
      <description>Now that we’ve defined some example particle systems, let’s see how we can put them into use.&#xA;Adding Rain Let’s start with our RainParticleSystem, and add rain that runs down the screen. Since we don’t need to start/stop the rain for this simple example, all we need to do is construct the particle system and add it to the Game.Components list in the Game.Initialize() method:&#xA;RainParticleSystem rain = new RainParticleSystem(this, new Rectangle(100, -10, 500, 10)); Components.</description>
    </item>
    <item>
      <title>Refactoring as a Game Component</title>
      <link>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/06-summary/</link>
      <pubDate>Sun, 22 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/09-particle-systems/06-summary/</guid>
      <description>In this chapter we examined the idea of particle systems, which draw a large number of sprites to create visual effects within the game. We also went over the design of such a system we can use with MonoGame, leveraging the DrawableGameComponent base class and design approaches like hook methods, to make a relatively hands-off but flexible approach to create new custom particle systems. We also created three example particle systems to emulate rain, explosions, and a trail of sparks.</description>
    </item>
  </channel>
</rss>