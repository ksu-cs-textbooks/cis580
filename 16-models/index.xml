




  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Models :: K-State CIS 580 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cis580/16-models/</link>
    <description>Rendering Complex 3D Objects</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 15:18:14 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cis580/16-models/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/01-introduction/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/01-introduction/</guid>
      <description>With some experience building our own triangle meshes, let’s turn our attention to those that have been built for us by artists working with modeling software. These meshes are typically organized into a model - a collection of triangle meshes and transformations that collectively define a complex 3D shape.&#xA;Like our earlier examples, we’ll start from a starter project with our assets pre-loaded. In addition, we’ll include the ICamera interface and the CirclingCamera we created in the lesson on Lights and Cameras, and the Terrain class and IHeightMap interface from our exploration of Heightmap Terrain.</description>
    </item>
    <item>
      <title>Model Basics</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/02-model-basics/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/02-model-basics/</guid>
      <description>A model is a collection of the information that defines a 3D object. Rather than being hand-created or hard-coded (as we have done in our previous work), a model is usually created using 3D modeling software (i.e. Blender, 3D Studio, Maya, etc). Instead of exposing the raw data of the meshes, these software packages provide an abstraction, often based on real-world sculpting techniques or constructive geometry transformations that assist artists in creating complex three-dimensional shapes.</description>
    </item>
    <item>
      <title>Tank Class</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/03-tank-class/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/03-tank-class/</guid>
      <description>Instead of using the Model class directly, let’s wrap it in our own custom class, Tank. As with many of our classes, let’s hold onto a Game reference. In addition, let’s have a reference to the Model of the tank, and its position and orentation in the world:&#xA;/// &lt;summary&gt; /// A class representing a tank in the game /// &lt;/summary&gt; public class Tank { // The game this tank belongs to Game game; // The tank&#39;s model Model model; // The tank&#39;s position in the world Vector3 position = Vector3.</description>
    </item>
    <item>
      <title>Skeletal Animation</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/04-skeletal-animation/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/04-skeletal-animation/</guid>
      <description>Now that we can see our tank clearly, let’s see if we can’t get that turret to aim. Doing so requires us to explore the concept of skeletal animation. If you remember in our discussion of models, we said most models include both triangle meshes and bones. These “bones” are really just transformation matrices, which are applied to a specific mesh in the model. Often they also are arranged in a hierarchy, often referred to as a skeleton.</description>
    </item>
    <item>
      <title>Chase Camera</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/05-chase-camera/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/05-chase-camera/</guid>
      <description>At this point, we have a pretty impressive tank, but it can be kind of difficult to see. Let’s implement a new kind of camera, which will stay close to the tank, and follow as it moves. Of course, to do so, we need to know where the tank is.&#xA;The IFollowable Interface Let’s create an interface to declare the properties we would need to be able to follow an arbitrary game object - basically, its position in the world, and the direction it is facing:</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cis580/16-models/06-summary/</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/16-models/06-summary/</guid>
      <description>Now that you have a closer view of your tank, you might want to make the individual wheels rotate. I’ll leave that as an exercise for the reader, but the bones you’d be interested in are “r_back_wheel_geo”, “l_back_wheel_geo”, “r_front_wheel_geo”, and “l_front_wheel_geo”. The front wheels are also set up to be rotated, using the “r_steer_geo” and “l_steer_geo” bones.&#xA;Clearly there is a lot more you could do just with the tank model.</description>
    </item>
  </channel>
</rss>