




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game Architecture on K-State CIS 580 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/index.html</link>
    <description>Recent content in Game Architecture on K-State CIS 580 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2020 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/01-introduction/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/01-introduction/index.html</guid>
      <description>Now that you&amp;rsquo;ve moved through much of the foundations of building games, let&amp;rsquo;s take a step back and talk about how to best organize that task. After all, games are one of the most complex software systems you can build. In the words of Jason Gregory, a game is:
A soft real-time interactive agent-based simulation
This means that not only do you need to process user input, update a simulated world, and then render that simulated world, you also have to do this in realtime (i.</description>
    </item>
    <item>
      <title>Game Services</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/02-game-services/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/02-game-services/index.html</guid>
      <description>A common approach in software architecture for loose coupling of systems is the use of services. Services are implemented with 1) a service provider - essentially a collection of services that can be searched for a service, and new services can be registered with, 2) interfaces that define specific services how to work with the service, and 3) classes that implement these interfaces. This is the Service Locator Pattern as implemented in C#.</description>
    </item>
    <item>
      <title>Game Components</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/03-game-components/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/03-game-components/index.html</guid>
      <description>A second useful decoupling pattern in MonoGame is the use of game components. You&amp;rsquo;ve probably noticed that many of the classes you have written have a similar pattern: they each have a LoadContent(), Update(), and Draw() method, and these often take the same arguments. In your game class, you probably mostly invoke these methods for each class in turn. MonoGame provides the concept of game components to help manage this task.</description>
    </item>
    <item>
      <title>Game Screens</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/04-game-screens/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/04-game-screens/index.html</guid>
      <description>XNA offered a sample building with these ideas that further organized a game into screens that has been ported to MonoGame .This was heavily influenced by Windows Phone, and includes gestures and &amp;ldquo;tombstoning&amp;rdquo; support. A more simplified form is presented here. It organizes a game into &amp;ldquo;screens&amp;rdquo;, each with its own logic and rendering, such as a menu, puzzle, cutscene, etc.
A scene manager game component manages a stack of these screens, and updates and renders the topmost.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/05-summary/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/07-game-architecture/05-summary/index.html</guid>
      <description>In this chapter we explored some new tools for organizing our game code. We learned about how MonoGame utilizes services to provide loosely-coupled access between a service provider and consumer. We also saw how the MonoGame concept of Game Components works, and how we can define custom game components and add them to the Game.Component collection. Finally, we explored one further organization tool in the Game Screen concept from the XNA GameStateManagement sample.</description>
    </item>
  </channel>
</rss>