<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction :: K-State CIS 580 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cis580/07-game-architecture/01-introduction/index.html</link>
    <description>Now that you’ve moved through much of the foundations of building games, let’s take a step back and talk about how to best organize that task. After all, games are one of the most complex software systems you can build. In the words of Jason Gregory, a game is:&#xA;A soft real-time interactive agent-based simulation&#xA;This means that not only do you need to process user input, update a simulated world, and then render that simulated world, you also have to do this in realtime (i.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate></lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cis580/07-game-architecture/01-introduction/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>