




	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lighting and Cameras on K-State CIS 580 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/index.html</link>
    <description>Recent content in Lighting and Cameras on K-State CIS 580 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2020 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/01-introduction/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/01-introduction/index.html</guid>
      <description>You&amp;rsquo;ve now seen how vertices are grouped into triangles and rendered using accelerated hardware, how we can use a mesh of triangles to represent more complex objects, and how we can apply a texture to that mesh to provide visual detail. Now we need to add light sources that can add shading to our models, and a camera which can be shared by all objects in a scene to provide a common view and projection matrix.</description>
    </item>
    <item>
      <title>Adding a Crate</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/02-adding-a-crate/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/02-adding-a-crate/index.html</guid>
      <description>The first thing we&amp;rsquo;ll want to add is something to render. For this example we&amp;rsquo;ll employ a very common game prop - a crate. As you might expect, a crate is little more than a cube with a texture applied. However, we will need to make a few changes from our previous Cube class.
CrateType Enum One of these is adding a texture - but we actually have three possible textures to choose from: &amp;ldquo;crate0_diffuse&amp;rdquo;, &amp;ldquo;crate1_diffuse&amp;rdquo;, and &amp;ldquo;crate2_diffuse&amp;rdquo;.</description>
    </item>
    <item>
      <title>Adding Lights</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/03-adding-lights/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/03-adding-lights/index.html</guid>
      <description>Well, we have a crate. Let&amp;rsquo;s make it more interesting by adding some lights. To start with, we&amp;rsquo;ll use the BasicEffect&amp;rsquo;s default lights. Add the line:
effect.EnableDefaultLighting();Into your Crate.IntializeEffect() method. Then run the program again. Notice a difference?
.
The default lighting is useful to quickly see what our object will look like illuminated, but ultimately, we&amp;rsquo;ll want to define our own lights and how they interact with our objects.</description>
    </item>
    <item>
      <title>Adding a Camera</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/04-adding-a-camera/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/04-adding-a-camera/index.html</guid>
      <description>So far we&amp;rsquo;ve set the World, View, and Transform matrix of each 3D object within that object. That works fine for these little demo projects, but once we start building a full-fledged game, we expect to look at everything in the world from the same perspective. This effectively means we want to use the same view and perspective matrices for all objects in a scene. Moreover, we want to move that perspective around in a well-defined manner.</description>
    </item>
    <item>
      <title>More Crates!</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/05-more-crates/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/05-more-crates/index.html</guid>
      <description>Let&amp;rsquo;s up the ante a bit, and add multiple crates to the game.
Refactor Crate We don&amp;rsquo;t want all of our crates in the same spot, so it&amp;rsquo;s time to change our world matrix. Let&amp;rsquo;s refactor our Crate so we can pass a matrix in through the constructor:
/// &amp;lt;summary&amp;gt; /// Creates a new crate instance /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;game&amp;#34;&amp;gt;The game this crate belongs to&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;#34;type&amp;#34;&amp;gt;The type of crate to use&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;#34;world&amp;#34;&amp;gt;The position and orientation of the crate in the world&amp;lt;/param&amp;gt; public Crate(Game game, CrateType type, Matrix world) { this.</description>
    </item>
    <item>
      <title>FPS Camera</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/06-fps-camera/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/06-fps-camera/index.html</guid>
      <description>Let&amp;rsquo;s go ahead and create a camera that the player can actually control. This time, we&amp;rsquo;ll adopt a camera made popular by PC first-person shooters, where the player&amp;rsquo;s looking direction is controlled by the mouse, and the WASD keys move forward and back and strife side-to-side.
The FPS Camera Class Let&amp;rsquo;s start by defining our class, FPSCamera:
/// &amp;lt;summary&amp;gt; /// A camera controlled by WASD + Mouse /// &amp;lt;/summary&amp;gt; public class FPSCamera : ICamera { }Private Fields This camera is somewhat unique in it partially the splits vertical from horizontal axes; the vertical axis only controls the angle the player is looking along, while the horizontal axis informs both looking and the direction of the player&amp;rsquo;s movement.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/07-summary/index.html</link>
      <pubDate>Tue, 24 Mar 2020 10:00:00 -0500</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cis580/14-lighting-and-cameras/07-summary/index.html</guid>
      <description>In this lesson, we&amp;rsquo;ve seen how to apply Phong lighting using the BasicEffect, and how to set up cameras. Armed with this knowledge, you&amp;rsquo;re ready to start building explorable game environments.
A good next step is to think about what other kinds of cameras you can create. What about an over-the-shoulder camera that follows the player? Or a first-person camera that uses GamePad input? As you now know, a game camera is nothing more than code to determine where the camera is in a scene, and where it is pointed.</description>
    </item>
  </channel>
</rss>