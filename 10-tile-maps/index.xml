<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tile Maps :: K-State CIS 580 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/index.html</link>
    <description>I feel like we’ve passed that tree before…&#xA;via GIPHY</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 15:18:14 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cis580/10-tile-maps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/01-introduction/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/01-introduction/index.html</guid>
      <description>While the earliest video games often featured worlds that were sized to the dimensions of the screen, it was not long before game worlds were to grow larger. This brought serious challenges to game development, as the platforms of the time did not have very large memory resources to draw upon.&#xA;A similar problem existed in storing raster images in early computers, where memory space was a premium. Remember, raster images have three or four color channels - Red, Green, Blue, and sometimes Alpha.</description>
    </item>
    <item>
      <title>Tilemap Concepts</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/02-tilemap-concepts/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/02-tilemap-concepts/index.html</guid>
      <description>Let’s start from a purely conceptual level, with some diagrams using tile assets created by Eris available from OpenGameArt. A tile map could be thought of as a grid of tiles, as demonstrated in this image:&#xA;Along with the map is the tile set, which defines the individual tiles that can be used within the map, i.e.:&#xA;We assign a number to each tile in the tile set:&#xA;We can then specify what tile fills a grid cell in the tile map with the same number, i.</description>
    </item>
    <item>
      <title>2D and 1D Arrays</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/03-2d-and-1d-arrays/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/03-2d-and-1d-arrays/index.html</guid>
      <description>Let’s talk briefly about how a 2d array is actually stored in memory. We like to think of it as looking something like this visualization:&#xA;But in reality, it is stored linearly, like this:&#xA;To access a particular element in the array, the 2d coordinates must be transformed into a 1d index. Note that each row follows the proceeding rows, so the starting index of each row would be the width of the row, plus the x-coordinate, i.</description>
    </item>
    <item>
      <title>A Basic Tile Engine</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/04-a-basic-tilemap/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/04-a-basic-tilemap/index.html</guid>
      <description>Now that we have a good sense of what a tile map consists of, as well as how to effectively use a 1-dimensional array as a 2-dimensional array, let’s discuss actual implementations. As we discussed conceptually, we need: 1) a set of tiles, and 2) the arrangement of those tiles into a map.&#xA;Let’s start by thinking about our tiles. To draw a tile, we need to know:&#xA;What texture the tile appears in The bounds of the tile in that texture Where the tile should appear on screen To determine this information, we need several other items:</description>
    </item>
    <item>
      <title>Tiled Editor</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/05-tiled-editor/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/05-tiled-editor/index.html</guid>
      <description>Once we start thinking in terms of large, complex maps editing the map by hand becomes a daunting task. Instead, we want a tool to edit the map visually. One of the best free tools to do so is the Tiled Map Editor. Tiled is free, open-source, and widely used in the games industry. It allows you to quickly create a tilemap by importing tilesets and drawing the map using a suite of visual tools.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/06-summary/index.html</link>
      <pubDate>Fri, 20 Mar 2020 10:53:05 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis580/10-tile-maps/06-summary/index.html</guid>
      <description>In this chapter we learned about tile maps, an important technique for creating large game worlds with small memory footprints. We also examined the Tiled map editor and saw an example of loading a Tiled map. However, this approach used traditional File I/O. In our next chapter, we’ll learn how to use the Content Pipeline to process the TMX file directly.</description>
    </item>
  </channel>
</rss>